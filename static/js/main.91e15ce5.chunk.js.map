{"version":3,"sources":["Card.js","Cardlist.js","Searchbox.js","Robot.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","Cardlist","robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","username","ErrorBoundary","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","target","value","filterrobo","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"+MAceA,EAZJ,SAACC,GAAS,IACVC,EAAeD,EAAfC,GAAGC,EAAYF,EAAZE,KAAKC,EAAOH,EAAPG,MACf,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAI,SAAUC,IAAG,+BAA0BL,EAA1B,cACtB,6BACQ,4BAAKC,EAAL,KACA,2BAAIC,MCOTI,EAbE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,6BACaA,EAAOC,KAAI,SAACC,EAAKC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACUV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCItDU,EAZG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACI,yBAAKX,UAAU,QACf,2BACIA,UAAU,mCACXY,KAAK,SACJC,YAAY,WACZC,SAAUH,MCTTP,EAAS,CAClB,CACEP,GAAI,EACJC,KAAM,gBACNiB,SAAU,OACVhB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNiB,SAAU,YACVhB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNiB,SAAU,WACVhB,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNiB,SAAU,WACVhB,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNiB,SAAU,SACVhB,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNiB,SAAU,mBACVhB,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNiB,SAAU,eACVhB,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNiB,SAAU,gBACVhB,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNiB,SAAU,WACVhB,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNiB,SAAU,iBACVhB,MAAO,2BCvCEiB,E,kDAjBX,WAAYpB,GAAO,IAAD,8BACd,cAAMA,IACDqB,MAAQ,CACTC,UAAS,GAHC,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACH,+DAEJG,KAAKzB,MAAM2B,a,GAdEC,aCwCbC,E,kDApCX,aAAc,IAAD,8BACT,gBAWJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAACZ,YAAaiB,EAAMC,OAAOC,SAXzC,EAAKZ,MAAM,CACPb,OAAOA,EACPM,YAAY,IAJP,E,qDAeJ,IAAD,OACEoB,EAAaT,KAAKJ,MAAMb,OAAO2B,QAAO,SAAAC,GACxC,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS,EAAKjB,MAAMP,YAAYuB,kBAEpE,OAA+B,IAA3BZ,KAAKJ,MAAMb,OAAO+B,OAEX,yCAIX,yBAAKnC,UAAU,MACf,2CACA,kBAAC,EAAD,CAAWW,aAAcU,KAAKK,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUtB,OAAQ0B,U,GA9BRN,aCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,U","file":"static/js/main.91e15ce5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card=(props)=>{\n    const {id,name,email}=props;\n    return(\n        <div className='bg-light-green dib br3 pa3 ma2 grow tc'>\n            <img alt=\"robots\"  src={`https://robohash.org/${id}?200x200`}  />\n            <div>\n                    <h2>{name} </h2>\n                    <p>{email}</p>\n            </div>\n        </div>\n    )\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({robots}) =>{\n    return(\n        <div>\n                   { robots.map((user,i) => {\n                        return <Card key={i} \n                                                    id={robots[i].id} \n                                                    name={robots[i].name} \n                                                    email={robots[i].email} /> \n                    })}\n        </div>\n    );\n}\n\nexport default Cardlist","import React from 'react';\n\nconst Searchbox = ({searchfield,searchChange}) => {\n    return (\n        <div className=\"pa2 \">\n        <input \n            className=\"pa3 ba b--green bg-lightest-blue\"\n           type='search' \n            placeholder='Search..' \n            onChange={searchChange} />\n            </div>\n    );\n}\n\nexport default Searchbox;","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n]    ","import React,{Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError:false\n        }\n    }\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>Oops the site has some errors..</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React,{Component} from'react';\nimport Cardlist from './Cardlist';\nimport Searchbox from './Searchbox';\nimport {robots} from './Robot'\nimport ErrorBoundary from'./ErrorBoundary';\nclass App extends Component{\n    constructor(){\n        super()\n        this.state={\n            robots:robots,\n            searchfield:''\n        }\n    }\n    // componentDidMount(){\n    //     fetch('https://jsonplaceholder.typicode.com/users')\n    //     .then(response=>response.json())\n    //     .then(users=>this.setState({robots:users}))\n    // }\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n    render(){\n        const filterrobo = this.state.robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        if (this.state.robots.length===0)\n        {\n            return <h1>Loading..</h1>\n        }\n        else{\n    return(\n        <div className='tc'>\n        <h1 >RoboFriends</h1>\n        <Searchbox searchChange={this.onSearchChange}/>\n        <ErrorBoundary>\n        <Cardlist robots={filterrobo} />\n        </ErrorBoundary>\n        </div>\n    )\n    }}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\nReactDOM.render( <App/> ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}